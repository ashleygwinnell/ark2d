#version 150
precision highp float;

uniform sampler2D ark_TextureId;

uniform vec2 grain_Resolution; // iResolution
uniform float grain_Time; // iTime
uniform float grain_Strength; // 0.0 - ~0.2 - 1.0

in vec2 ark_VertexTexCoordOut;
in vec4 ark_VertexColorOut;

out vec4 ark_FragColor;



/* 
Copied from http://devlog-martinsh.blogspot.co.uk/2013/05/image-imperfections-and-film-grain-post.html

GLSL implementation of this shader: https://dl.dropboxusercontent.com/u/11542084/FilmGrain_v1.1

Copied references from referenced web page:
References:
- noise algorithm I copied from HERE* by toneburst, but original implementation comes from Stefan Gustavson found HERE**
* http://machinesdontcare.wordpress.com/2009/06/25/3d-perlin-noise-sphere-vertex-shader-sourcecode/
** http://staffwww.itn.liu.se/~stegu/simplexnoise/
*/

/*
Film Grain post-process shader v1.1	
Martins Upitis (martinsh) devlog-martinsh.blogspot.com
2013

--------------------------
This work is licensed under a Creative Commons Attribution 3.0 Unported License.
So you are free to share, modify and adapt it for your needs, and even use it for commercial use.
I would also love to hear about a project you are using it.

Have fun,
Martins
--------------------------

Perlin noise shader by toneburst:
http://machinesdontcare.wordpress.com/2009/06/25/3d-perlin-noise-sphere-vertex-shader-sourcecode/

Shadertoy version:
https://www.shadertoy.com/view/Mly3Rw
*/


const float permTexUnit = 1.0/256.0;		// Perm texture texel-size
const float permTexUnitHalf = 0.5/256.0;	// Half perm texture texel-size

#define width float(grain_Resolution.x)
#define height float(grain_Resolution.y)

bool colored = false; //colored noise?
float coloramount = 0.6;
float grainsize = 1.5/width; //grain particle size (1.5 - 2.5)
float lumamount = 2.0; //
    
//a random texture generator, but you can also use a pre-computed perturbation texture
vec4 rnm(in vec2 tc) 
{
    float timer = grain_Time;
    float noise =  sin(dot(tc + vec2(timer,timer),vec2(12.9898,78.233))) * 43758.5453;

	float noiseR =  fract(noise)*2.0-1.0;
	float noiseG =  fract(noise*1.2154)*2.0-1.0; 
	float noiseB =  fract(noise*1.3453)*2.0-1.0;
	float noiseA =  fract(noise*1.3647)*2.0-1.0;
	
	return vec4(noiseR,noiseG,noiseB,noiseA);
}

float fade(in float t) {
	return t*t*t*(t*(t*6.0-15.0)+10.0);
}

float pnoise3D(in vec3 p)
{
	vec3 pi = permTexUnit*floor(p)+permTexUnitHalf; // Integer part, scaled so +1 moves permTexUnit texel
	// and offset 1/2 texel to sample texel centers
	vec3 pf = fract(p);     // Fractional part for interpolation

	// Noise contributions from (x=0, y=0), z=0 and z=1
	float perm00 = rnm(pi.xy).a ;
	vec3  grad000 = rnm(vec2(perm00, pi.z)).rgb * 4.0 - 1.0;
	float n000 = dot(grad000, pf);
	vec3  grad001 = rnm(vec2(perm00, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n001 = dot(grad001, pf - vec3(0.0, 0.0, 1.0));

	// Noise contributions from (x=0, y=1), z=0 and z=1
	float perm01 = rnm(pi.xy + vec2(0.0, permTexUnit)).a ;
	vec3  grad010 = rnm(vec2(perm01, pi.z)).rgb * 4.0 - 1.0;
	float n010 = dot(grad010, pf - vec3(0.0, 1.0, 0.0));
	vec3  grad011 = rnm(vec2(perm01, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n011 = dot(grad011, pf - vec3(0.0, 1.0, 1.0));

	// Noise contributions from (x=1, y=0), z=0 and z=1
	float perm10 = rnm(pi.xy + vec2(permTexUnit, 0.0)).a ;
	vec3  grad100 = rnm(vec2(perm10, pi.z)).rgb * 4.0 - 1.0;
	float n100 = dot(grad100, pf - vec3(1.0, 0.0, 0.0));
	vec3  grad101 = rnm(vec2(perm10, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n101 = dot(grad101, pf - vec3(1.0, 0.0, 1.0));

	// Noise contributions from (x=1, y=1), z=0 and z=1
	float perm11 = rnm(pi.xy + vec2(permTexUnit, permTexUnit)).a ;
	vec3  grad110 = rnm(vec2(perm11, pi.z)).rgb * 4.0 - 1.0;
	float n110 = dot(grad110, pf - vec3(1.0, 1.0, 0.0));
	vec3  grad111 = rnm(vec2(perm11, pi.z + permTexUnit)).rgb * 4.0 - 1.0;
	float n111 = dot(grad111, pf - vec3(1.0, 1.0, 1.0));

	// Blend contributions along x
	vec4 n_x = mix(vec4(n000, n001, n010, n011), vec4(n100, n101, n110, n111), fade(pf.x));

	// Blend contributions along y
	vec2 n_xy = mix(n_x.xy, n_x.zw, fade(pf.y));

	// Blend contributions along z
	float n_xyz = mix(n_xy.x, n_xy.y, fade(pf.z));

	// We're done, return the final noise value.
	return n_xyz;
}

//2d coordinate orientation thing
vec2 coordRot(in vec2 tc, in float angle)
{
	float aspect = width/height;
    vec2 uv = (tc*2.0)-1.0;

	float rotX = (uv.x*aspect*cos(angle)) - (uv.y*sin(angle));
	float rotY = (uv.y*cos(angle)) + (uv.x*aspect*sin(angle));

//	float rotX = ((tc.x*2.0-1.0)*aspect*cos(angle)) - ((tc.y*2.0-1.0)*sin(angle));
//	float rotY = ((tc.y*2.0-1.0)*cos(angle)) + ((tc.x*2.0-1.0)*aspect*sin(angle));

	rotX = ((rotX/aspect)*0.5+0.5);
	rotY = rotY*0.5+0.5;
	return vec2(rotX,rotY);
}


highp float rand(vec2 co)
{
    highp float a = 12.9898;
    highp float b = 78.233;
    highp float c = 43758.5453;
    highp float dt= dot(co.xy ,vec2(a,b));
    highp float sn= mod(dt,3.14);
    return fract(sin(sn) * c);
}

//good for large clumps of smooth looking noise, but too repetitive
//for small grains
float fastNoise(vec2 n) {
	const vec2 d = vec2(0.0, 1.0);
	vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
	return mix(mix(rand(b), rand(b + d.yx ), f.x), mix(rand(b + d.xy ), rand(b + d.yy ), f.x), f.y);
}

vec4 mainImage( vec2 fragCoord ) 
{
    float timer = grain_Time;
	vec2 texCoord = fragCoord.rg / vec2(grain_Resolution.x, grain_Resolution.y);
	
	vec3 rotOffset = vec3(1.425,3.892,5.835); //rotation offset values	
	vec2 rotCoordsR = coordRot(texCoord, timer + rotOffset.x);
	vec3 noise = vec3(pnoise3D(vec3(rotCoordsR*vec2(width/grainsize,height/grainsize),0.0)));
  
	if (colored)
	{
		vec2 rotCoordsG = coordRot(texCoord, timer + rotOffset.y);
		vec2 rotCoordsB = coordRot(texCoord, timer + rotOffset.z);
		noise.g = mix(noise.r,pnoise3D(vec3(rotCoordsG*vec2(width/grainsize,height/grainsize),1.0)),coloramount);
		noise.b = mix(noise.r,pnoise3D(vec3(rotCoordsB*vec2(width/grainsize,height/grainsize),2.0)),coloramount);
	}

	vec3 col = texture(ark_TextureId, texCoord).rgb;

	//constant moving burn
    col += vec3( fastNoise(texCoord*sin(timer*0.1)*3.0 + fastNoise(timer*0.4+texCoord*2.0)) )*0.2;

	// noisiness response curve based on scene luminance
	/*	
		vec3 lumcoeff = vec3(0.299,0.587,0.114);
		float luminance = mix(0.0,dot(col, lumcoeff),lumamount);
		float lum = smoothstep(0.2,0.0,luminance);
		lum += luminance;
	*/

	vec3 lumcoeff = vec3(0.299,0.587,0.114);

//	float luminance = mix(0.0,dot(col, lumcoeff),lumamount);
	float luminance = lumamount * dot(col, lumcoeff);

	float lum = smoothstep(0.2,0.0,luminance);
//	float lum = smoothstep(0.2,0.0,1.0-luminance);

	lum += luminance;
	
	noise = mix(noise,vec3(0.0),pow(lum,4.0));
	col = col+noise*grain_Strength;

	

	// https://github.com/mattdesl/filmic-gl/blob/master/demos/shaders/grain.frag
	//large occasional burns
    float specs = fastNoise(texCoord*(10.0+sin(timer)*5.0) + fastNoise(timer+texCoord*50.0) );
    col -= vec3( smoothstep(0.955, 0.96, specs*sin(timer*4.0)  ) )*0.05;   
    specs = fastNoise(texCoord*1.0*(10.0+sin(timer)*5.0) - fastNoise(timer+texCoord*40.0) );
    col -= (1.-vec3( smoothstep(0.99, 0.96, (specs)*(sin(cos(timer)*4.0)/2.+0.5)) ))*0.07;
    
    // // //this is really crappy and should be revisited...
    col -= clamp( 0.1*vec3( smoothstep(0.000001, 0.0000, rand(texCoord.xx*timer) ) * (abs(cos(timer)*sin(timer*1.5))-0.5) ), 0.0, 1.0 );
   
	return vec4(col,1.0);
}



void main(void)
{
	ark_FragColor = mainImage(ark_VertexTexCoordOut) * ark_VertexColorOut;
}

