/*
 * BMFont.h
 *
 *  Created on: 13-Apr-2010
 *      Author: Ashley
 */

#ifndef ARK_CORE_FONT_BMFONT_H_
#define ARK_CORE_FONT_BMFONT_H_

#include <string>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <iostream>
#include <map>
using namespace std;

#include "Font.h"

#include "../../Namespaces.h"
#include "../ARK2D.h"

namespace ARK {
    namespace Core {
        namespace Font {

            #ifndef DOXYGEN_SHOULD_SKIP_THIS
            /*!
             * \ignore
             * \brief CharDescriptor holds the information for a single character.
             */

            struct CharDescriptor
            {
                //clean 16 bytes (now 20?)
                /*unsigned int x, y;
                unsigned int Width, Height;
                unsigned int WidthOriginal, HeightOriginal;
                unsigned int XOffset, YOffset;
                unsigned int XAdvance;
                unsigned int Page;
                */
                float x, y;
                float Width, Height;
                float WidthOriginal, HeightOriginal;
                float XOffset, YOffset;
                float XAdvance;
                float Page;

                CharDescriptor():
                    x( 0 ),
                    y( 0 ),
                    Width( 0 ),
                    Height( 0 ),
                    WidthOriginal(0),
                    HeightOriginal(0),
                    XOffset( 0 ),
                    YOffset( 0 ),
                    XAdvance( 0 ),
                    Page( 0 )
                { }
            };
            // Charset holds the descriptions that apply to all characters, as well as the descriptors for every character.
            struct Charset
            {
                /*unsigned int LineHeight;
                unsigned int Base;
                unsigned int Width, Height;
                unsigned int Pages;*/
                float LineHeight;
                float Base;
                float Width, Height;
                float Pages;
                CharDescriptor Chars[256];

                Charset():
                    LineHeight(1),
                    Base(1),
                    Width(1),
                    Height(1),
                    Chars() {

                }
            };
            struct FontVertex {
                float x, y, tu, tv;
            };

            #endif


            /*!
             * \brief Bitmap / texture-mapped fonts generated by either Heiro or BMFont tools.
             * These types of fonts are used by the framework by default.
             *
             * @author Ashley Gwinnell <info@ashleygwinnell.co.uk>
             */
            class ARK2D_API BMFont : public ARK::Core::Font::Font {
                private:
                    bool m_loaded;
                    char* m_data;
                    string m_FontFile;
                    string m_ImageFile;
                    Charset m_Charset;
                    Image* m_Image;
                    map<int, Image*> m_letterImages;

                    int m_kerning;
                    void* m_getLetterColorFunction;

                    string m_fontName;
                    signed int m_fontSize;

                public:
                    BMFont();
                    BMFont(unsigned int fntResource, unsigned int imgResource, unsigned int imgResourceType);
                    BMFont(void* data, Image* i);
                    BMFont(const string& f, const string& i);
                    BMFont(const string& f, const string& i, const Color& mask);
                    virtual void drawString(const string& Str, float drawx, float drawy);
                    virtual void drawString(const string& Str, float drawx, float drawy, float drawz);
                    virtual void drawString(const std::string str, float x, float y, signed int alignX, signed int alignY, float rotation=0.0f, float scale=1.0f);
                    virtual void drawStringFitBox(const std::string str, float x, float y, float w, float h, signed int alignX, signed int alignY, float rotation=0.0f, float defaultScale=1.0f, float minScale=1.0f, float maxScale=1.0f);
                    unsigned int getStringWidth(const string& Str) const;
                    unsigned int getStringHeight(const string& Str) const;
                    float getCharXAdvance(unsigned char ch);
                    float getCharXOffset(unsigned char ch);
                    unsigned int getLineHeight() const ;
                    Image* getImage() const;
                    virtual uint32_t getLetterColor( int position );
                    virtual void setLetterColorFunction( void* func );
                    virtual void resetLetterColorFunction( );

                    void setKerning(int k);

                    void scale(float f);

                    virtual ~BMFont();
                private:
                    bool Parse();


            };
        }
    }
}

#endif /* FONT_H_ */
